#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Id$
#
#--------------------------------------------------------------------
# Validation Rule messages
#--------------------------------------------------------------------

# Format for the different levels follows this spirit:
#
# 1. Should be short and fixed such that someone could search/grep for it
#    without having to know/use regular expressions.  These tend to be similar
#    to the message key.
#
# 2. Intended to contain the issue expressed in 1 with only the essential
#    details, should not line wrap if possible.  Be terse.
#
# 3. Teacher's assistant.  A much more conversational and possibly more detailed
#    explanation of the issue, should tell the user what to do to fix the problem.
#    I.e. don't just point out what is wrong, also point out what is right.  Use
#    several lines if needed.
#


# 0 - Error Message
# 1 - Stack Trace
1.cannot.validate         Cannot validate jar
2.cannot.validate         Cannot validate jar: {0}
3.cannot.validate         Cannot validate jar: {0}

# 0 - Class name
# 1 - Element (home, ejb-class, remote)
# 2 - Bean name
1.missing.class           Missing class
2.missing.class           Missing class {0} 
3.missing.class           The class {0} not found. Check that the class specified in the {1} element for bean {2} is spelled correctly and the class is present in the jar

# 0 - Class name
# 1 - EJB Class name
1.wrong.class.type        Wrong class type
2.wrong.class.type        Wrong class type {0}
3.wrong.class.type        The class {0} is the wrong type, it does not extend {1}

# 0 - method name
# 1 - full method
# 2 - remote|home
# 3 - interface name
# 4 - EJB Class name
1.no.busines.method       No such business method
2.no.busines.method       Business method {0} not implemented.
3.no.busines.method       Business method {1} not implemented. The method was declared in the {2} interface {3}, but not implemented in the ejb class {4}

# 0 - home interface
# 1 - remote interface
1.no.home.create          No create method.  
2.no.home.create          No create method in {0}.
3.no.home.create          The home interface {0} must declare at least one create method. Example:\n\n\tpublic {1} create() throws javax.ejb.CreateException, java.rmi.RemoteException;

# 1 - EJB Class name
# 2 - create name
# 3 - create params
1.session.no.ejb.create     Create method not implemented.
2.session.no.ejb.create     Create method not implemented: {1}({2}).
3.session.no.ejb.create     There should be a create method in the bean class {0} with the following signature:\n\n\tpublic void {1}({2}) throws javax.ejb.CreateException

# 1 - EJB Class name
# 2 - create name
# 3 - primary key class
# 4 - create params
1.entity.no.ejb.create    Create method not implemented.
2.entity.no.ejb.create    Create method not implemented: {2}({3}).
3.entity.no.ejb.create    There should be a create method in the bean class {0} with the following signature:\n\n\tpublic {1} {2}({3}) throws javax.ejb.CreateException

# 1 - EJB Class name
# 2 - create name
# 3 - create params
1.no.ejb.post.create      No ejbPostCreate method
2.no.ejb.post.create      Missing create method: {1}({2})
3.no.ejb.post.create      Entity create method with no matching ejbPostCreate.  There should be an ejbPostCreate method in the bean class {0} with the following signature:\n\n\tpublic void {1}({2}) throws javax.ejb.CreateException

# 1 - bean class
# 2 - create params
# 3 - home interface
1.unused.ejb.create       Unused ejbCreate method
2.unused.ejb.create       Unused ejbCreate method: {2}({3})
3.unused.ejb.create       Create method will never be called.  The bean class {0} defines the create method {1}({3}), but there is no matching {2}({3}) method in the home interface {2}
                                                                                            

# 0 - Class name
# 1 - Element (home, ejb-class, remote)
# 2 - Bean name
# 3 - Dependent Class name
1.misslocated.class           Misslocated class
2.misslocated.class           Misslocated class {0} 
3.misslocated.class           The class {0} was found in a parent classloader and was loaded from there rather than this jar.  However, a dependent class {3} was not found in the parent classloader.  \n\nThere are two ways to fix this:\n\nOne, remove the class {0} from the jar in the parent classloader to ensure the class is only loaded from this jar.\n\nTwo, move the dependent class {3} and any other dependent classes into the jar in the parent classloader.

# 0 - Referring Class name
# 1 - Dependent Class name
# 2 - Element (home, ejb-class, remote)
# 3 - Bean name
1.missing.dependent.class           Missing dependent class or library
2.missing.dependent.class           Missing dependent class or library: {1} needed by {2}
3.missing.dependent.class           The class {1} not found and is referenced by the {2} class {0}.  The Check that the class or related library is available in the classpath


# CheckAssemblyBindings.java
# fail("InterceptorBinding", "interceptorBinding.noSuchEjbName", binding.getEjbName(), join(interceptorClasses, ","));
1.interceptorBinding.noSuchEjbName = Referenced EJB does not exist
2.interceptorBinding.noSuchEjbName = Referenced EJB does not exist: {0}
3.interceptorBinding.noSuchEjbName = Binding refers to an EJB, {0}, that does not exist.  Interceptors listed in binding: {1}

# fail("InterceptorBinding", "interceptorBinding.ejbNameRequiredWithMethod", binding.getMethod().getMethodName(), join(interceptorClasses, ","));
1.interceptorBinding.ejbNameRequiredWithMethod = ejb-name required with method binding
2.interceptorBinding.ejbNameRequiredWithMethod = ejb-name required with binding on method '{0}'.
3.interceptorBinding.ejbNameRequiredWithMethod = Binding an interceptor to a specific method requires the ejb-name of the bean to also be specified.  Fix binding on method '{0}' for interceptors {1}.

# fail("MethodPermission", "methodPermission.ejbNameRequired", method.getMethodName(), join(permission.getRoleName(), ","));
1.methodPermission.ejbNameRequired =  ejb-name required for method-permission
2.methodPermission.ejbNameRequired =  ejb-name required for method-permission: {0}
3.methodPermission.ejbNameRequired =  Assinging a method-permission requires the ejb-name of the bean to also be specified.  Fix method-permission on method '{0}' for security roles {1}.

# fail("MethodPermission", "methodPermission.noSuchEjbName", method.getEjbName(), method.getMethodName(), join(permission.getRoleName(), ","));
1.methodPermission.noSuchEjbName = Referenced EJB does not exist
2.methodPermission.noSuchEjbName = Referenced EJB does not exist: {0} on method '{1}'.
3.methodPermission.noSuchEjbName = Method-permission refers to an EJB, {0}, that does not exist.  Fix method-permission on method '{0}' for security roles {1}.

# fail("ContainerTransaction", "containerTransaction.ejbNameRequired", method.getMethodName(), transaction.getTransAttribute());
1.containerTransaction.ejbNameRequired = ejb-name required for container-transaction
2.containerTransaction.ejbNameRequired = ejb-name required for container-transaction: {0}
3.containerTransaction.ejbNameRequired = Assinging a container-transaction requires the ejb-name of the bean to also be specified.  Fix container-transaction on method '{0}' with transaction attribute {1}.

# fail("ContainerTransaction", "containerTransaction.noSuchEjbName", method.getMethodName(), method.getEjbName(), transaction.getTransAttribute());
1.containerTransaction.noSuchEjbName = Referenced EJB does not exist
2.containerTransaction.noSuchEjbName = Referenced EJB does not exist: {0} on method '{1}'.
3.containerTransaction.noSuchEjbName = Container-transaction refers to an EJB, {0}, that does not exist.  Fix container-transaction on method '{0}' with transaction attribute {1}.

# CheckCallbacks.java
# fail(componentName, "aroundInvoke.badReturnType", aroundInvoke.getMethodName(), returnType.getName(), aroundInvoke.getClassName());
1.aroundInvoke.badReturnType = AroundInvoke method must return java.lang.Object
2.aroundInvoke.badReturnType = AroundInvoke method must return java.lang.Object: method '{0}' returns '{1}'
3.aroundInvoke.badReturnType = AroundInvoke method '{0}' in class {2} illegally returns {1} instead of java.lang.Object.  Change the method signature to 'java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception'

# fail(componentName, "aroundInvoke.mustThrowException", aroundInvoke.getMethodName(), aroundInvoke.getClassName());
1.aroundInvoke.mustThrowException = AroundInvoke method must declare 'throws Exception'
2.aroundInvoke.mustThrowException = AroundInvoke method must declare 'throws Exception': method '{0}'
3.aroundInvoke.mustThrowException = AroundInvoke method '{0}' must declare java.lang.Exception in the throws clause.  Change the method signature to 'java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception'

# fail(componentName, "aroundInvoke.missing", aroundInvoke.getMethodName(), aroundInvoke.getClassName());
1.aroundInvoke.missing = AroundInvoke method missing
2.aroundInvoke.missing = AroundInvoke method missing: '{0}' in class {1}
3.aroundInvoke.missing = AroundInvoke method '{0}' not found in class {1}.  The required method signature is 'java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception'

# fail(componentName, "aroundInvoke.invalidArguments", aroundInvoke.getMethodName(), getParameters(possibleMethods.get(0)), aroundInvoke.getClassName());
1.aroundInvoke.invalidArguments = Invalid AroundInvoke arguments
2.aroundInvoke.invalidArguments = Invalid AroundInvoke arguments: {0}({1})
3.aroundInvoke.invalidArguments = AroundInvoke method signature '{0}({1})' in class {2} has invalid arguments.  The required method signature is 'java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception'

# fail(componentName, "aroundInvoke.missing.possibleTypo", aroundInvoke.getMethodName(), possibleMethods.size(), aroundInvoke.getClassName());
1.aroundInvoke.missing.possibleTypo = AroundInvoke method missing or invalid
2.aroundInvoke.missing.possibleTypo = AroundInvoke method missing or invalid: looked for '{0}(javax.ejb.InvocationContext)' in class {2}
3.aroundInvoke.missing.possibleTypo = AroundInvoke method missing or invalid.  There are {1} methods with the name '{0}' visible in class {2}, none have the required signature of 'java.lang.Object {0}(javax.ejb.InvocationContext) throws java.lang.Exception'

# fail(bean, "callback.badReturnType", type, callback.getMethodName(), returnType.getName(), callback.getClassName());
1.callback.badReturnType = {0} method must return 'void'
2.callback.badReturnType = {0} method must return 'void': method {1} returns {2}
3.callback.badReturnType = {0} method '{1}' in class {3} illegally returns {2} instead of void.  Change the method signature to 'void {1}()'

# fail(bean, "callback.missing", type, callback.getMethodName(), callback.getClassName());
1.callback.missing = {0} method missing
2.callback.missing = {0} method missing: '{1}' in class {2}
3.callback.missing = {0} method '{1}' not found in class {2}.  The required method signature is 'void {1}()'

# fail(bean, "callback.invalidArguments", type, callback.getMethodName(), getParameters(possibleMethods.get(0)), callback.getClassName());
1.callback.invalidArguments = Invalid {0} arguments
2.callback.invalidArguments = Invalid {0} arguments: {1}({2})
3.callback.invalidArguments = {0} method signature '{1}({2})' in class {3} has invalid arguments.  The required method signature is 'void {1}()'

# fail(bean, "callback.missing.possibleTypo", type, callback.getMethodName(), possibleMethods.size(), callback.getClassName());
1.callback.missing.possibleTypo = {0} method missing or invalid
2.callback.missing.possibleTypo = {0} method missing or invalid: looked for 'void {1}()' in class {3}
3.callback.missing.possibleTypo = {0} method missing or invalid.  There are {2} methods with the name '{1}' visible in class {3}, none have the required signature of 'void {0}()'

# fail("Interceptor", "interceptor.callback.badReturnType", type, callback.getMethodName(), returnType.getName(), interceptorClass.getName());
1.interceptor.callback.badReturnType = {0} method must return 'void'
2.interceptor.callback.badReturnType = {0} method must return 'void': method {1} returns {2} in class {}
3.interceptor.callback.badReturnType = {0} method '{1}' in class {3} illegally returns {2} instead of void.  Change the method signature to 'void {1}(javax.ejb.InvocationContext)'

# fail("Interceptor", "interceptor.callback.missing", type, callback.getMethodName(), interceptorClass.getName());
1.interceptor.callback.missing = {0} method missing
2.interceptor.callback.missing = {0} method missing: '{1}' in class {2}
3.interceptor.callback.missing = {0} method '{1}' not found in class {2}.  The required method signature is 'void {1}(javax.ejb.InvocationContext)'

# fail("Interceptor", "interceptor.callback.invalidArguments", type, callback.getMethodName(), getParameters(possibleMethods.get(0)), interceptorClass.getName());
1.interceptor.callback.invalidArguments = Invalid {0} arguments
2.interceptor.callback.invalidArguments = Invalid {0} arguments: {1}({2}) in class {3}
3.interceptor.callback.invalidArguments = {0} method signature '{1}({2})' in class {3} has invalid arguments.  The required method signature is 'void {1}(javax.ejb.InvocationContext)'

# fail("Interceptor", "interceptor.callback.missing.possibleTypo", type, callback.getMethodName(), possibleMethods.size(), interceptorClass.getName());
1.interceptor.callback.missing.possibleTypo = {0} method missing or invalid
2.interceptor.callback.missing.possibleTypo = {0} method missing or invalid: looked for 'void {1}(javax.ejb.InvocationContext)' in class {3}
3.interceptor.callback.missing.possibleTypo = {0} method missing or invalid.  There are {2} methods with the name '{1}' visible in class {3}, none have the required signature of 'void {0}()'

# CheckInjectionTargets.java
# warn(bean, "injectionTarget.nameContainsSet", target.getInjectionTargetName(), shortNameInvalid, shortNameCorrect, correctName, reference.getName(), reference.getClass().getSimpleName());
1.injectionTarget.nameContainsSet = Corrected invalid injection-target-name
2.injectionTarget.nameContainsSet = Corrected invalid injection-target-name: {0}
3.injectionTarget.nameContainsSet = The injection-target-name '{0}' for setter methods should not begin with 'set'.  The last portion of the name '{1}' has been automatically corrected to '{2}'.  Update the descriptor with the correct injection-target-name of '{3}' to avoid receiving this warning.  Resource to be injected is '{4}'.

# CheckServiceRefs.java
# warn(bean, "serviceRef.unsupported", ref.getName());
1.serviceRef.unsupported = Web service refs are not yet supported
2.serviceRef.unsupported = Web service refs are not yet supported: service-ref {0}
3.serviceRef.unsupported = The web service ref '{0}' will be ignored as this feature is not yet implemented.  The entry 'java:comp/env/{0}' will not be available in JNDI and any associated injects will not be performed.


