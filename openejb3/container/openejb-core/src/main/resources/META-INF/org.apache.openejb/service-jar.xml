<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<ServiceJar>

  <!--
  #===================================================================#
  #       D E F A U L T    O P E N E J B    S E R V I C E S           #
  #===================================================================#
  #
  #
  #  This file defines all the default configurations of containers,
  #  factories, managers and services that come with OpenEJB.
  #
  #  Can contain numerous configurations of the standard services
  #  making it easy for users to simply name the one they want in
  #  their configuration files.
  #
  #  Over time this will be become a library of default
  #  configurations
  #
  #
  #  The Configuraitions in this file reference the following other
  #  files:
  #
  #  conf/default.cmp_global_tx_database.xml
  #  conf/default.cmp_local_tx_database.xml
  #  conf/default.idb_database.conf
  -->

  <!--
  # ==========================================================
  # Default Container-Managed Persistence EntityBean Container
  # ==========================================================
  -->
  <ServiceProvider id="Default CMP Container"
                   provider-type="Container"
                   constructor="id, transactionManager, securityService, CmpEngineFactory, Engine, ConnectorName"
                   class-name="org.apache.openejb.core.cmp.CmpContainer">

    #CmpEngineFactory org.apache.openejb.alt.containers.castor_cmp11.CastorCmpEngineFactory
    CmpEngineFactory org.apache.openejb.core.cmp.jpa.JpaCmpEngineFactory

    #Engine  derby
    Engine  instantdb

    ConnectorName  Default JDBC Database
  </ServiceProvider>

  <!--
  # ==========================================================
  # Default Bean-Managed Persistence EntityBean Container
  # ==========================================================
  -->
  <ServiceProvider
          id="Default BMP Container"
          provider-type="Container"
          constructor="id, transactionManager, securityService, PoolSize"
          class-name="org.apache.openejb.core.entity.EntityContainer">

    # Specifies the size of the bean pools for this
    # bmp entity container.

    PoolSize 10

</ServiceProvider>



  <!--
  # ==========================================================
  # Default Stateless SessinBean Container
  # ==========================================================
  -->
  <ServiceProvider
          id="Default Stateless Container"
          provider-type="Container"
          constructor="id, transactionManager, securityService, TimeOut, PoolSize, StrictPooling"
          class-name="org.apache.openejb.core.stateless.StatelessContainer">

    # Specifies the time to wait between invocations. This
    # value is measured in milliseconds. A value of 5 would
    # result in a time-out of 5 milliseconds between invocations.
    # A value of zero would mean no timeout.

    TimeOut 0

    # Specifies the size of the bean pools for this
    # stateless SessionBean container.

    PoolSize 10

    # StrictPooling tells the container what to do when the pool
    # reaches it's maximum size and there are incoming requests
    # that need instances.
    #
    # With strict pooling, requests will have to wait for instances
    # to become available. The pool size will never grow beyond the
    # the set PoolSize value.
    #
    # Without strict pooling, the container will create temporary
    # instances to meet demand. The instances will last for just one
    # method invocation and then are removed.

    StrictPooling true


  </ServiceProvider>


  <!--
  # ==========================================================
  # Default Stateful SessinBean Container
  # ==========================================================
  -->
  <ServiceProvider
          id="Default Stateful Container"
          provider-type="Container"
          constructor="id, transactionManager, securityService, Passivator, TimeOut, PoolSize, BulkPassivate"
          class-name="org.apache.openejb.core.stateful.StatefulContainer">

    # The passivator is responsible for writing beans to disk
    # at passivation time. Different passivators can be used
    # by setting this property to the fully qualified class name
    # of the PassivationStrategy implementation. The passivator
    # is not responsible for invoking any callbacks or other
    # processing, its only responsibly is to write the bean state
    # to disk.
    #
    # Known implementations:
    # org.apache.openejb.core.stateful.RAFPassivater
    # org.apache.openejb.core.stateful.SimplePassivater

    Passivator org.apache.openejb.core.stateful.SimplePassivater

    # Specifies the time to wait between invocations. This
    # value is measured in minutes. A value of 5 would
    # result in a time-out of 5 minutes between invocations.

    TimeOut 20

    # Specifies the size of the bean pools for this
    # stateful SessionBean container.

    PoolSize 100

    # Property name that specifies the number of instances
    # to passivate at one time when doing bulk passivation.

    BulkPassivate 50

  </ServiceProvider>

  <!--
  # ==========================================================
  # Default Message Driven Container
  # ==========================================================
  -->
  <ServiceProvider
          id="Default MDB Container"
          provider-type="Container"
          constructor="id, transactionManager, securityService, ServerUrl, ThreadPoolSize, InstanceLimit"
          class-name="org.apache.openejb.core.mdb.ActiveMQContainer">

    # Specifies the url used to create the ActiveMQ resource adapter.

    ServerUrl tcp://localhost:51616

    # Specifies the size of the thread pool available to AciveMQ.

    ThreadPoolSize 10

    # Specifies the maximum number of bean instances that are
    # allowed to exist for each MDB deployment.

    InstanceLimit 10

  </ServiceProvider>

  <!--
  # ================================================
  # Default Proxy Factory implementation for JDK 1.3
  # ================================================
  -->
  <ServiceProvider
          id="Default JDK 1.3 ProxyFactory"
          provider-type="ProxyFactory"
          class-name="org.apache.openejb.util.proxy.Jdk13ProxyFactory"/>

  <!--
  # ================================================
  # Default Security Service implementation
  # ================================================
  -->
  <ServiceProvider
          id="Default Security Service"
          provider-type="SecurityService"
          class-name="org.apache.openejb.ri.sp.PseudoSecurityService"/>

  <!--
  # ================================================
  # Default Transaction Manager implementation
  # ================================================
  -->
  <ServiceProvider
          id="Default Transaction Manager"
          provider-type="TransactionManager"
          class-name="org.apache.geronimo.transaction.manager.GeronimoTransactionManager"/>

  <!--
  # ================================================
  # Default JCA ManagedConnectionFactory for JDBC
  # ================================================
  -->
  <ServiceProvider
          id="Default JDBC Database"
          provider-type="Connector"
          constructor="JdbcDriver,JdbcUrl,UserName,Password,Unmanaged"
          class-name="org.apache.openejb.resource.jdbc.JdbcManagedConnectionFactory">

    # Driver class name

    #JdbcDriver org.apache.derby.jdbc.EmbeddedDriver
    JdbcDriver org.hsqldb.jdbcDriver

    # Url for creating connections

    #JdbcUrl jdbc:derby:derbyDB;create=true
    JdbcUrl jdbc:hsqldb:file:hsqldb

    # Default user name

    #UserName admin
    UserName sa

    # Default password

    #Password pass
    Password  

    Unmanaged false
  </ServiceProvider>

  <ServiceProvider
          id="Default Unmanaged JDBC Database"
          provider-type="Connector"
          constructor="JdbcDriver,JdbcUrl,UserName,Password,Unmanaged"
          class-name="org.apache.openejb.resource.jdbc.JdbcManagedConnectionFactory">

    # Driver class name

    #JdbcDriver org.apache.derby.jdbc.EmbeddedDriver
    JdbcDriver org.hsqldb.jdbcDriver

    # Url for creating connections

    #JdbcUrl jdbc:derby:derbyDB;create=true
    JdbcUrl jdbc:hsqldb:file:hsqldb

    # Default user name

    #UserName admin
    UserName sa

    # Default password

    #Password pass
    Password

    Unmanaged true
  </ServiceProvider>

  <!--
  # ================================================
  # Default JCA ConnectionManager
  # ================================================
  -->
  <ServiceProvider
          id="Default Local TX ConnectionManager"
          provider-type="ConnectionManager"
          constructor="transactionManager"
          class-name="org.apache.openejb.resource.SharedLocalConnectionManager"/>


</ServiceJar>
